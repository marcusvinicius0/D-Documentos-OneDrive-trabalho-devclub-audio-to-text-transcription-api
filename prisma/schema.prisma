generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ChatbotStatus {
  Treinado
  Desativado
}

enum ChatbotVisibility {
  Publico
  Privado
}

model Chatbot {
  id                     String            @id @unique @default(uuid())
  name                   String            @default("Chatbot")
  status                 ChatbotStatus     @default(Treinado)
  visibility             ChatbotVisibility @default(Publico)
  lastTrainedAt          DateTime          @updatedAt
  model                  String            @default("")
  imageUrl               String?           @default("")
  authorEmail            String            @default("")
  authorName             String
  slug                   String            @default("")
  userId                 String            @default("")
  assistantId            String            @default("")
  threadId               String            @default("")
  wppSessionStatus       String            @default("")
  creditMessagesPerMonth Int               @default(0)
  subscriptionPlans      Json[]
  instructions           String            @default("")
  temperature            Float             @default(0.5)

  Files       FilesForBotTraining[]
  Texts       TextsForBotTraining[]
  ChatSession ChatSession[]
  User        User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user-chatbot")
}

model User {
  id String @id @unique @default(uuid())

  name      String
  email     String   @unique
  avatarUrl String?
  chatbotId String?
  Chatbot   Chatbot? @relation(fields: [chatbotId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("user")
}

model FilesForBotTraining {
  id            String   @id @unique @default(uuid())
  message       String
  author        String
  fileName      String   @default("")
  messageLength Int      @default(0)
  lastModified  DateTime @default(now())
  isFileTrained Boolean  @default(false)
  chatbotId     String
  Chatbot       Chatbot  @relation(fields: [chatbotId], references: [id])
  slug          String   @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("files-for-bot-training")
}

model TextsForBotTraining {
  id            String  @id @unique @default(uuid())
  text          String
  author        String
  isTextTrained Boolean @default(false)
  textLength    Int     @default(0)
  chatbotId     String
  Chatbot       Chatbot @relation(fields: [chatbotId], references: [id])
  slug          String  @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("texts-for-bot-training")
}

model ChatSession {
  id      String  @id @unique @default(uuid())
  userId  String
  isFiled Boolean @default(false)

  chatbotId       String            @default("")
  Chatbot         Chatbot           @relation(fields: [chatbotId], references: [id])
  ChatbotMessages ChatbotMessages[]
  slug            String            @default("")
  isChatWidget    Boolean           @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat-session")
}

model ChatbotMessages {
  id            String      @id @unique @default(uuid())
  chatSessionId String
  sender        Json
  bot           Json
  messages      Json[]      @default([])
  isFiled       Boolean     @default(false)
  ChatSession   ChatSession @relation(fields: [chatSessionId], references: [id])
  isChatWidget  Boolean     @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chatbot-messages")
}
